// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate opencrud schema Queries that return many entites should have the return value be required 1`] = `
"type AggregateBroadcast {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Broadcast {
  id: ID!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
}

type BroadcastConnection {
  pageInfo: PageInfo!
  edges: [BroadcastEdge]!
  aggregate: AggregateBroadcast!
}

input BroadcastCreateInput {
  notifications: NotificationCreateManyInput
}

type BroadcastEdge {
  node: Broadcast!
  cursor: String!
}

enum BroadcastOrderByInput {
  id_ASC
  id_DESC
}

type BroadcastPreviousValues {
  id: ID!
}

type BroadcastSubscriptionPayload {
  mutation: MutationType!
  node: Broadcast
  updatedFields: [String!]
  previousValues: BroadcastPreviousValues
}

input BroadcastSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BroadcastWhereInput
  AND: [BroadcastSubscriptionWhereInput!]
  OR: [BroadcastSubscriptionWhereInput!]
  NOT: [BroadcastSubscriptionWhereInput!]
}

input BroadcastUpdateInput {
  notifications: NotificationUpdateManyInput
}

input BroadcastWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  AND: [BroadcastWhereInput!]
  OR: [BroadcastWhereInput!]
  NOT: [BroadcastWhereInput!]
}

input BroadcastWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBroadcast(data: BroadcastCreateInput!): Broadcast!
  updateBroadcast(data: BroadcastUpdateInput!, where: BroadcastWhereUniqueInput!): Broadcast
  upsertBroadcast(where: BroadcastWhereUniqueInput!, create: BroadcastCreateInput!, update: BroadcastUpdateInput!): Broadcast!
  deleteBroadcast(where: BroadcastWhereUniqueInput!): Broadcast
  deleteManyBroadcasts(where: BroadcastWhereInput): BatchPayload!
  createNotification: Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateManyInput {
  connect: [NotificationWhereUniqueInput!]
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
}

type NotificationPreviousValues {
  id: ID!
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateManyInput {
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  broadcast(where: BroadcastWhereUniqueInput!): Broadcast
  broadcasts(where: BroadcastWhereInput, orderBy: BroadcastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Broadcast]!
  broadcastsConnection(where: BroadcastWhereInput, orderBy: BroadcastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BroadcastConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  node(id: ID!): Node
}

type Subscription {
  broadcast(where: BroadcastSubscriptionWhereInput): BroadcastSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
}
"
`;
